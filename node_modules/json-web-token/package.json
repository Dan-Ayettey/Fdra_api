{
  "_from": "json-web-token@^3.2.0",
  "_id": "json-web-token@3.2.0",
  "_inBundle": false,
  "_integrity": "sha512-y+zDkON17Zk7X3Hf0Rv04k8N7cP1GDRonLLL7WkdnlHl1ur2hwta4MYzxG8nWhQWRBNlIp1erszhmo/65RSTIw==",
  "_location": "/json-web-token",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "json-web-token",
    "fetchSpec": "^3.2.0",
    "name": "json-web-token",
    "raw": "json-web-token@^3.2.0",
    "rawSpec": "^3.2.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/json-web-token/-/json-web-token-3.2.0.tgz",
  "_shasum": "06cbc8ab039f474f0f3fabc2e073e7fb6903b8d8",
  "_shrinkwrap": null,
  "_spec": "json-web-token@^3.2.0",
  "_where": "C:\\Users\\ictte\\Desktop\\api",
  "author": {
    "name": "@joaquimserafim"
  },
  "bugs": {
    "url": "https://github.com/joaquimserafim/json-web-token/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "base64-url": "^2.3.2",
    "is.object": "^1.0.0",
    "json-parse-safe": "^2.0.0",
    "xtend": "^4.0.2"
  },
  "deprecated": false,
  "description": "JSON Web Token (JWT) is a compact token format intended for space constrained environments such as HTTP Authorization headers and URI query parameters.",
  "devDependencies": {
    "coveralls": "^3.0.6",
    "istanbul": "0.4.5",
    "mocha": "^6.2.1",
    "nyc": "^14.1.1",
    "pre-commit": "^1.2.2",
    "standard": "^14.3.1"
  },
  "engine": {
    "node": ">=8"
  },
  "files": [
    "LICENSE",
    "README.md",
    "index.d.ts",
    "index.js"
  ],
  "homepage": "https://github.com/joaquimserafim/json-web-token",
  "keywords": [
    "authorization",
    "http",
    "json-web-token",
    "jwt",
    "tokens",
    "web"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "json-web-token",
  "nyc": {
    "include": [
      "index.js"
    ]
  },
  "optionalDependencies": {},
  "pre-commit": [
    "coverage",
    "test"
  ],
  "readme": "# json-web-token\n\nJWT encode and decode for Node.js that can use callbacks or by returning an object `{error:, value:}`\n\n\n**WIKI**\n\nJSON Web Token (JWT) is a compact URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JavaScript Object Notation (JSON) object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or MACed and/or encrypted.\n\n\n[info](http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-08) & [more info](http://self-issued.info/docs/draft-jones-json-web-token-01.html)\n\n\n<a href=\"https://nodei.co/npm/json-web-token/\"><img src=\"https://nodei.co/npm/json-web-token.png?downloads=true\"></a>\n\n[![Build Status](https://img.shields.io/badge/build-passing-brightgreen.svg?style=flat-square)](https://travis-ci.org/joaquimserafim/json-web-token)![Code Coverage 100%](https://img.shields.io/badge/code%20coverage-100%25-green.svg?style=flat-square)[![ISC License](https://img.shields.io/badge/license-ISC-blue.svg?style=flat-square)](https://github.com/joaquimserafim/json-web-token/blob/master/LICENSE)\n\nthe version `2.*.*` should work only for NodeJS >= **4** for NodeJS **0.10** and **0.12** should install the version `1.6.3`\n\n### API\n\n\n##### jwt#encode(key, payload, [algorithm], cb)\n\n* **key**, your secret\n* **payload**, the payload or Claim Names or an object with {payload, header}\n\n*ex:*\n```js\n{\n   \"iss\": \"my_issurer\",\n  \"aud\": \"World\",\n  \"iat\": 1400062400223,\n  \"typ\": \"/online/transactionstatus/v2\",\n  \"request\": {\n    \"myTransactionId\": \"[myTransactionId]\",\n    \"merchantTransactionId\": \"[merchantTransactionId]\",\n    \"status\": \"SUCCESS\"\n  }\n}\n```\n\n*attention that exists some reserved claim names (like \"iss\", \"iat\", etc..) check [in here](http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-08#section-4) for more info about JWT Claims.*\n* **algorithm**, default to 'sha256', use *jwt#getAlgorithms()* to get the supported algorithms\n* **cb**, the callback(err[name, message], token)\n\n\n#####  jwt#decode(key, token, cb)\n\n* **key**, your secret\n* **token**, the JWT token\n* **cb**, the callback(err[name, message], decodedPayload[, decodedHeader])\n\n\n#### Example\n\n```js\nvar jwt = require('json-web-token');\n\nvar payload = {\n  \"iss\": \"my_issurer\",\n  \"aud\": \"World\",\n  \"iat\": 1400062400223,\n  \"typ\": \"/online/transactionstatus/v2\",\n  \"request\": {\n    \"myTransactionId\": \"[myTransactionId]\",\n    \"merchantTransactionId\": \"[merchantTransactionId]\",\n    \"status\": \"SUCCESS\"\n  }\n};\n\nvar secret = 'TOPSECRETTTTT';\n\n// encode\njwt.encode(secret, payload, function (err, token) {\n  if (err) {\n    console.error(err.name, err.message);\n  } else {\n    console.log(token);\n\n    // decode\n    jwt.decode(secret, token, function (err_, decodedPayload, decodedHeader) {\n      if (err) {\n        console.error(err.name, err.message);\n      } else {\n        console.log(decodedPayload, decodedHeader);\n      }\n    });\n  }\n});\n```\n\n**using the optional [reserved headers](http://self-issued.info/docs/draft-jones-json-web-token-01.html#ReservedHeaderParameterName) (alg and typ can't be set using this method)**\n```js\nvar settingAddHeaders = {\n  payload: {\n    \"iss\": \"my_issurer\",\n    \"aud\": \"World\",\n    \"iat\": 1400062400223,\n    \"typ\": \"/online/transactionstatus/v2\",\n    \"request\": {\n      \"myTransactionId\": \"[myTransactionId]\",\n      \"merchantTransactionId\": \"[merchantTransactionId]\",\n      \"status\": \"SUCCESS\"\n    }\n  },\n  header: {\n    kid: 'key ID'\n  }\n}\n\njwt.encode(secret, settingAddHeaders, function (err, token) {\n\n})\n\n```\n\n\n---\n\n#### this projet has been set up with a precommit that forces you to follow a code style, no jshint issues and 100% of code coverage before commit\n\nto run test\n```js\nnpm test\n```\n\nto run jshint\n```js\nnpm run lint\n```\n\nto run code style\n```js\nnpm run style\n```\n\nto run code coverage\n```js\nnpm run coverage\n```\n\nto open the code coverage report\n```js\nnpm run coverage:open\n```\n\nto run benchmarks\n```js\nnpm run bench\n```\n\nto run the source complexity tool\n```js\nnpm run complexity\n```\n\nto open the complexity report\n```js\nnpm run complexity:open\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/joaquimserafim/json-web-token.git"
  },
  "scripts": {
    "bench": "echo 'installing dependencies first ...' && sleep 1 && npm i --save-dev benchmark microtime && echo '' && node bench && npm uninstall --save-dev benchmark microtime",
    "coverage": "nyc report --reporter=text-lcov | coveralls",
    "coverage:check": "nyc check-coverage --statements 100 --functions 100 --lines 100 --branches 100",
    "coverage:open": "open coverage/index.html",
    "test": "standard --fix && nyc --reporter=html --reporter=text mocha"
  },
  "types": "index.d.ts",
  "version": "3.2.0"
}
